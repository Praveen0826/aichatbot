{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohana\\\\Desktop\\\\geminiai\\\\geminiai\\\\src\\\\Context\\\\Context.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport run from '../Config/gemini.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [recentPrompt, setRecentPrompt] = useState(\"\");\n  const [prevPrompt, setPrevPrompt] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  // const delaypara = (index, nextword) => {\n\n  // }\n\n  const onSent = async prompt => {\n    setResultData(\"\");\n    setError(\"\");\n    setLoading(true);\n    setShowResult(true);\n    setRecentPrompt(input);\n    // setPrevPrompt(prev => [...prev, input])\n    let response;\n    if (prompt !== undefined) {\n      response = await run(prompt);\n      setRecentPrompt(prompt);\n    } else {\n      setPrevPrompt(prev => [...prev, input]);\n      setRecentPrompt(input);\n      response = await run(input);\n    }\n    try {\n      console.log(\"Sending prompt to API:\", input); // Log the input prompt\n      const response = await run(input);\n      console.log(\"Received response from API:\", response); // Log the response\n      setResultData(response);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err); // Log the error\n      setError(\"An error occurred while fetching the data\");\n    } finally {\n      setLoading(false);\n      setInput(\"\");\n    }\n  };\n  const newchat = () => {\n    setLoading(false);\n    setShowResult(false);\n  };\n  const contextValue = {\n    prevPrompt,\n    setPrevPrompt,\n    onSent,\n    recentPrompt,\n    setRecentPrompt,\n    showResult,\n    loading,\n    resultData,\n    error,\n    input,\n    setInput,\n    newchat\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"KOMrDT5//4yiEt69XRxy8sTfu/Y=\");\n_c = ContextProvider;\nexport default ContextProvider;\n\n// import React, { createContext, useState } from 'react';\n// import run from '../Config/gemini.js';\n\n// export const Context = createContext();\n\n// const ContextProvider = (props) => {\n//     const [input, setInput] = useState(\"\");\n//     const [recentPrompt, setRecentPrompt] = useState(\"\");\n//     const [prevPrompt, setPrevPrompt] = useState([]);\n//     const [showResult, setShowResult] = useState(false);\n//     const [loading, setLoading] = useState(false);\n//     const [resultData, setResultData] = useState(\"\");\n//     const [error, setError] = useState(\"\");\n\n//     const onSent = async () => {\n//         setResultData(\"\");\n//         setError(\"\");\n//         setLoading(true);\n//         setShowResult(true);\n//         setRecentPrompt(input);\n\n//         try {\n//             console.log(\"Sending prompt to API:\", input); // Log the input prompt\n//             const response = await run(input);\n//             console.log(\"Received response from API:\", response); // Log the response\n\n//             // Process response with custom formatting\n//             let responseArray = response.split(\"**\");\n//             let newarray = \"\";\n\n//             for (let i = 0; i < responseArray.length; i++) {\n//                 if (i === 0 || i % 2 !== 1) {\n//                     newarray += responseArray[i];\n//                 } else {\n//                     newarray += \"<br />\" + responseArray[i] + \"<br />\";\n//                 }\n//             }\n\n//             setResultData(newarray);\n\n//         } catch (err) {\n//             console.error(\"Error fetching data:\", err); // Log the error\n//             setError(\"An error occurred while fetching the data\");\n//         } finally {\n//             setLoading(false);\n//             setInput(\"\");\n//         }\n//     };\n\n//     const contextValue = {\n//         prevPrompt,\n//         setPrevPrompt,\n//         onSent,\n//         recentPrompt,\n//         setRecentPrompt,\n//         showResult,\n//         loading,\n//         resultData,\n//         error,\n//         input,\n//         setInput,\n//     };\n\n//     return (\n//         <Context.Provider value={contextValue}>\n//             {props.children}\n//         </Context.Provider>\n//     );\n// };\n\n// export default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","run","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","setInput","recentPrompt","setRecentPrompt","prevPrompt","setPrevPrompt","showResult","setShowResult","loading","setLoading","resultData","setResultData","error","setError","onSent","prompt","response","undefined","prev","console","log","err","newchat","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Mohana/Desktop/geminiai/geminiai/src/Context/Context.jsx"],"sourcesContent":["\r\n\r\nimport React, { createContext, useState } from 'react';\r\nimport run from '../Config/gemini.js';\r\n\r\nexport const Context = createContext();\r\n\r\nconst ContextProvider = (props) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n    const [prevPrompt, setPrevPrompt] = useState([]);\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultData, setResultData] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    // const delaypara = (index, nextword) => {\r\n\r\n    // }\r\n\r\n\r\n    const onSent = async (prompt) => {\r\n        setResultData(\"\");\r\n        setError(\"\");\r\n        setLoading(true);\r\n        setShowResult(true);\r\n\r\n        setRecentPrompt(input);\r\n        // setPrevPrompt(prev => [...prev, input])\r\n        let response;\r\n        if (prompt !== undefined) {\r\n            response = await run(prompt);\r\n            setRecentPrompt(prompt)\r\n        }\r\n        else {\r\n            setPrevPrompt(prev => [...prev, input])\r\n            setRecentPrompt(input)\r\n\r\n            response = await run(input)\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        try {\r\n            console.log(\"Sending prompt to API:\", input); // Log the input prompt\r\n            const response = await run(input);\r\n\r\n            console.log(\"Received response from API:\", response); // Log the response\r\n            setResultData(response);\r\n\r\n\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching data:\", err); // Log the error\r\n            setError(\"An error occurred while fetching the data\");\r\n        } finally {\r\n            setLoading(false);\r\n            setInput(\"\");\r\n        }\r\n    };\r\n\r\n    const newchat = () => {\r\n        setLoading(false)\r\n        setShowResult(false)\r\n    }\r\n\r\n\r\n\r\n    const contextValue = {\r\n        prevPrompt,\r\n        setPrevPrompt,\r\n        onSent,\r\n        recentPrompt,\r\n        setRecentPrompt,\r\n        showResult,\r\n        loading,\r\n        resultData,\r\n        error,\r\n        input,\r\n        setInput,\r\n        newchat\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={contextValue}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nexport default ContextProvider;\r\n\r\n// import React, { createContext, useState } from 'react';\r\n// import run from '../Config/gemini.js';\r\n\r\n// export const Context = createContext();\r\n\r\n// const ContextProvider = (props) => {\r\n//     const [input, setInput] = useState(\"\");\r\n//     const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n//     const [prevPrompt, setPrevPrompt] = useState([]);\r\n//     const [showResult, setShowResult] = useState(false);\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [resultData, setResultData] = useState(\"\");\r\n//     const [error, setError] = useState(\"\");\r\n\r\n//     const onSent = async () => {\r\n//         setResultData(\"\");\r\n//         setError(\"\");\r\n//         setLoading(true);\r\n//         setShowResult(true);\r\n//         setRecentPrompt(input);\r\n\r\n//         try {\r\n//             console.log(\"Sending prompt to API:\", input); // Log the input prompt\r\n//             const response = await run(input);\r\n//             console.log(\"Received response from API:\", response); // Log the response\r\n\r\n//             // Process response with custom formatting\r\n//             let responseArray = response.split(\"**\");\r\n//             let newarray = \"\";\r\n\r\n//             for (let i = 0; i < responseArray.length; i++) {\r\n//                 if (i === 0 || i % 2 !== 1) {\r\n//                     newarray += responseArray[i];\r\n//                 } else {\r\n//                     newarray += \"<br />\" + responseArray[i] + \"<br />\";\r\n//                 }\r\n//             }\r\n\r\n//             setResultData(newarray);\r\n\r\n//         } catch (err) {\r\n//             console.error(\"Error fetching data:\", err); // Log the error\r\n//             setError(\"An error occurred while fetching the data\");\r\n//         } finally {\r\n//             setLoading(false);\r\n//             setInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const contextValue = {\r\n//         prevPrompt,\r\n//         setPrevPrompt,\r\n//         onSent,\r\n//         recentPrompt,\r\n//         setRecentPrompt,\r\n//         showResult,\r\n//         loading,\r\n//         resultData,\r\n//         error,\r\n//         input,\r\n//         setInput,\r\n//     };\r\n\r\n//     return (\r\n//         <Context.Provider value={contextValue}>\r\n//             {props.children}\r\n//         </Context.Provider>\r\n//     );\r\n// };\r\n\r\n// export default ContextProvider;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}