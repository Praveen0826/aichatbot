{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mohana\\\\Desktop\\\\geminiai\\\\geminiai\\\\src\\\\Context\\\\Context.jsx\",\n  _s = $RefreshSig$();\n// import run from '../Config/gemini.js'\n// const { createContext, useState } = require(\"react\");\n// // import runChat from \"../Config/gemini\"\n\n// export const Context = createContext();\n\n// const ContextProvider = (props) => {\n\n//     const [input, setinput] = useState(\"\");\n//     const [recentprompt, setrecentprompt] = useState(\"\");\n//     const [prevprompt, setprevprompt] = useState([]);\n//     const [ShowResult, setshowResult] = useState(false);\n//     const [loading, setloading] = useState(false);\n//     const [resultdata, Setresultdata] = useState(\"\");\n\n//     const onSent = async () => {\n\n//         Setresultdata(\"\")\n//         setloading(true);\n//         setshowResult(true)\n//         setrecentprompt(input)\n//         const response = await run(input)\n//         Setresultdata(response)\n//         setloading(false);\n//         setinput(\"\")\n//     }\n\n//     const Contextvalue = {\n\n//         prevprompt,\n//         setprevprompt,\n//         onSent,\n//         recentprompt,\n//         setrecentprompt,\n\n//         ShowResult,\n//         loading,\n//         resultdata,\n//         input,\n//         setinput\n\n//     }\n\n//     return (\n//         <Context.Provider value={Contextvalue}>\n//             {props.children}\n//         </Context.Provider>\n//     )\n// }\n\n// export default ContextProvider\n\nimport React, { createContext, useState } from 'react';\nimport run from '../Config/gemini.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [recentPrompt, setRecentPrompt] = useState(\"\");\n  const [prevPrompt, setPrevPrompt] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const delaypara = (index, nextword) => {};\n  const onSent = async () => {\n    setResultData(\"\");\n    setError(\"\");\n    setLoading(true);\n    setShowResult(true);\n    setRecentPrompt(input);\n    try {\n      console.log(\"Sending prompt to API:\", input); // Log the input prompt\n      const response = await run(input);\n      console.log(\"Received response from API:\", response); // Log the response\n      setResultData(response);\n      // let responseArray = response.split(\"**\");\n      // let newarray;\n      // for (let i = 0; i < responseArray.length; i++) {\n      //     if (i === 0 || i % 2 !== 1) {\n      //         newarray += responseArray[i];\n      //     }\n      //     else {\n      //         newarray += \"<br>\" + responseArray[i] + \"</br>\"\n      //     }\n      // }\n    } catch (err) {\n      console.error(\"Error fetching data:\", err); // Log the error\n      setError(\"An error occurred while fetching the data\");\n    } finally {\n      setLoading(false);\n      setInput(\"\");\n    }\n  };\n  const contextValue = {\n    prevPrompt,\n    setPrevPrompt,\n    onSent,\n    recentPrompt,\n    setRecentPrompt,\n    showResult,\n    loading,\n    resultData,\n    error,\n    input,\n    setInput\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"KOMrDT5//4yiEt69XRxy8sTfu/Y=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","run","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","setInput","recentPrompt","setRecentPrompt","prevPrompt","setPrevPrompt","showResult","setShowResult","loading","setLoading","resultData","setResultData","error","setError","delaypara","index","nextword","onSent","console","log","response","err","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Mohana/Desktop/geminiai/geminiai/src/Context/Context.jsx"],"sourcesContent":["// import run from '../Config/gemini.js'\r\n// const { createContext, useState } = require(\"react\");\r\n// // import runChat from \"../Config/gemini\"\r\n\r\n\r\n// export const Context = createContext();\r\n\r\n\r\n\r\n// const ContextProvider = (props) => {\r\n\r\n//     const [input, setinput] = useState(\"\");\r\n//     const [recentprompt, setrecentprompt] = useState(\"\");\r\n//     const [prevprompt, setprevprompt] = useState([]);\r\n//     const [ShowResult, setshowResult] = useState(false);\r\n//     const [loading, setloading] = useState(false);\r\n//     const [resultdata, Setresultdata] = useState(\"\");\r\n\r\n//     const onSent = async () => {\r\n\r\n\r\n//         Setresultdata(\"\")\r\n//         setloading(true);\r\n//         setshowResult(true)\r\n//         setrecentprompt(input)\r\n//         const response = await run(input)\r\n//         Setresultdata(response)\r\n//         setloading(false);\r\n//         setinput(\"\")\r\n//     }\r\n\r\n\r\n\r\n//     const Contextvalue = {\r\n\r\n//         prevprompt,\r\n//         setprevprompt,\r\n//         onSent,\r\n//         recentprompt,\r\n//         setrecentprompt,\r\n\r\n//         ShowResult,\r\n//         loading,\r\n//         resultdata,\r\n//         input,\r\n//         setinput\r\n\r\n//     }\r\n\r\n//     return (\r\n//         <Context.Provider value={Contextvalue}>\r\n//             {props.children}\r\n//         </Context.Provider>\r\n//     )\r\n// }\r\n\r\n// export default ContextProvider\r\n\r\nimport React, { createContext, useState } from 'react';\r\nimport run from '../Config/gemini.js';\r\n\r\nexport const Context = createContext();\r\n\r\nconst ContextProvider = (props) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n    const [prevPrompt, setPrevPrompt] = useState([]);\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultData, setResultData] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const delaypara = (index, nextword) => {\r\n\r\n    }\r\n\r\n    const onSent = async () => {\r\n        setResultData(\"\");\r\n        setError(\"\");\r\n        setLoading(true);\r\n        setShowResult(true);\r\n        setRecentPrompt(input);\r\n\r\n        try {\r\n            console.log(\"Sending prompt to API:\", input); // Log the input prompt\r\n            const response = await run(input);\r\n            console.log(\"Received response from API:\", response); // Log the response\r\n            setResultData(response);\r\n            // let responseArray = response.split(\"**\");\r\n            // let newarray;\r\n            // for (let i = 0; i < responseArray.length; i++) {\r\n            //     if (i === 0 || i % 2 !== 1) {\r\n            //         newarray += responseArray[i];\r\n            //     }\r\n            //     else {\r\n            //         newarray += \"<br>\" + responseArray[i] + \"</br>\"\r\n            //     }\r\n            // }\r\n\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching data:\", err); // Log the error\r\n            setError(\"An error occurred while fetching the data\");\r\n        } finally {\r\n            setLoading(false);\r\n            setInput(\"\");\r\n        }\r\n    };\r\n\r\n    const contextValue = {\r\n        prevPrompt,\r\n        setPrevPrompt,\r\n        onSent,\r\n        recentPrompt,\r\n        setRecentPrompt,\r\n        showResult,\r\n        loading,\r\n        resultData,\r\n        error,\r\n        input,\r\n        setInput,\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={contextValue}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nexport default ContextProvider;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAGA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,GAAG,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,OAAO,MAAMC,OAAO,gBAAGL,aAAa,CAAC,CAAC;AAEtC,MAAMM,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMsB,SAAS,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAEvC,CAAC;EAED,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvBN,aAAa,CAAC,EAAE,CAAC;IACjBE,QAAQ,CAAC,EAAE,CAAC;IACZJ,UAAU,CAAC,IAAI,CAAC;IAChBF,aAAa,CAAC,IAAI,CAAC;IACnBJ,eAAe,CAACH,KAAK,CAAC;IAEtB,IAAI;MACAkB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEnB,KAAK,CAAC,CAAC,CAAC;MAC9C,MAAMoB,QAAQ,GAAG,MAAM3B,GAAG,CAACO,KAAK,CAAC;MACjCkB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,QAAQ,CAAC,CAAC,CAAC;MACtDT,aAAa,CAACS,QAAQ,CAAC;MACvB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAGJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVH,OAAO,CAACN,KAAK,CAAC,sBAAsB,EAAES,GAAG,CAAC,CAAC,CAAC;MAC5CR,QAAQ,CAAC,2CAA2C,CAAC;IACzD,CAAC,SAAS;MACNJ,UAAU,CAAC,KAAK,CAAC;MACjBR,QAAQ,CAAC,EAAE,CAAC;IAChB;EACJ,CAAC;EAED,MAAMqB,YAAY,GAAG;IACjBlB,UAAU;IACVC,aAAa;IACbY,MAAM;IACNf,YAAY;IACZC,eAAe;IACfG,UAAU;IACVE,OAAO;IACPE,UAAU;IACVE,KAAK;IACLZ,KAAK;IACLC;EACJ,CAAC;EAED,oBACIN,OAAA,CAACC,OAAO,CAAC2B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAG,QAAA,EACjC3B,KAAK,CAAC2B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAC9B,EAAA,CAhEIF,eAAe;AAAAiC,EAAA,GAAfjC,eAAe;AAkErB,eAAeA,eAAe;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}