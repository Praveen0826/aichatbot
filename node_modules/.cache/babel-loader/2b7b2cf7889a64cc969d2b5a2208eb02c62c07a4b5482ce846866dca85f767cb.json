{"ast":null,"code":"// import run from '../Config/gemini.js'\n// const { createContext, useState } = require(\"react\");\n// // import runChat from \"../Config/gemini\"\n// export const Context = createContext();\n// const ContextProvider = (props) => {\n//     const [input, setinput] = useState(\"\");\n//     const [recentprompt, setrecentprompt] = useState(\"\");\n//     const [prevprompt, setprevprompt] = useState([]);\n//     const [ShowResult, setshowResult] = useState(false);\n//     const [loading, setloading] = useState(false);\n//     const [resultdata, Setresultdata] = useState(\"\");\n//     const onSent = async () => {\n//         Setresultdata(\"\")\n//         setloading(true);\n//         setshowResult(true)\n//         setrecentprompt(input)\n//         const response = await run(input)\n//         Setresultdata(response)\n//         setloading(false);\n//         setinput(\"\")\n//     }\n//     const Contextvalue = {\n//         prevprompt,\n//         setprevprompt,\n//         onSent,\n//         recentprompt,\n//         setrecentprompt,\n//         ShowResult,\n//         loading,\n//         resultdata,\n//         input,\n//         setinput\n//     }\n//     return (\n//         <Context.Provider value={Contextvalue}>\n//             {props.children}\n//         </Context.Provider>\n//     )\n// }\n// export default ContextProvider\nimport React,{createContext,useState}from'react';import run from'../Config/gemini.js';import{jsx as _jsx}from\"react/jsx-runtime\";export const Context=/*#__PURE__*/createContext();const ContextProvider=props=>{const[input,setInput]=useState(\"\");const[recentPrompt,setRecentPrompt]=useState(\"\");const[prevPrompt,setPrevPrompt]=useState([]);const[showResult,setShowResult]=useState(false);const[loading,setLoading]=useState(false);const[resultData,setResultData]=useState(\"\");const[error,setError]=useState(\"\");// const delaypara = (index, nextword) => {\n// }\nconst onSent=async prompt=>{setResultData(\"\");setError(\"\");setLoading(true);setShowResult(true);setRecentPrompt(input);// setPrevPrompt(prev => [...prev, input])\nlet response;if(prompt!==undefined){response=await run(prompt);setRecentPrompt(prompt);}else{setPrevPrompt(prev=>[...prev,input]);setRecentPrompt(input);response=await run(input);}try{console.log(\"Sending prompt to API:\",input);// Log the input prompt\nconst response=await run(input);console.log(\"Received response from API:\",response);// Log the response\nsetResultData(response);}catch(err){console.error(\"Error fetching data:\",err);// Log the error\nsetError(\"An error occurred while fetching the data\");}finally{setLoading(false);setInput(\"\");}};const newchat=()=>{setLoading(false);setShowResult(false);};const contextValue={prevPrompt,setPrevPrompt,onSent,recentPrompt,setRecentPrompt,showResult,loading,resultData,error,input,setInput,newchat};return/*#__PURE__*/_jsx(Context.Provider,{value:contextValue,children:props.children});};export default ContextProvider;// import React, { createContext, useState } from 'react';\n// import run from '../Config/gemini.js';\n// export const Context = createContext();\n// const ContextProvider = (props) => {\n//     const [input, setInput] = useState(\"\");\n//     const [recentPrompt, setRecentPrompt] = useState(\"\");\n//     const [prevPrompt, setPrevPrompt] = useState([]);\n//     const [showResult, setShowResult] = useState(false);\n//     const [loading, setLoading] = useState(false);\n//     const [resultData, setResultData] = useState(\"\");\n//     const [error, setError] = useState(\"\");\n//     const onSent = async () => {\n//         setResultData(\"\");\n//         setError(\"\");\n//         setLoading(true);\n//         setShowResult(true);\n//         setRecentPrompt(input);\n//         try {\n//             console.log(\"Sending prompt to API:\", input); // Log the input prompt\n//             const response = await run(input);\n//             console.log(\"Received response from API:\", response); // Log the response\n//             // Process response with custom formatting\n//             let responseArray = response.split(\"**\");\n//             let newarray = \"\";\n//             for (let i = 0; i < responseArray.length; i++) {\n//                 if (i === 0 || i % 2 !== 1) {\n//                     newarray += responseArray[i];\n//                 } else {\n//                     newarray += \"<br />\" + responseArray[i] + \"<br />\";\n//                 }\n//             }\n//             setResultData(newarray);\n//         } catch (err) {\n//             console.error(\"Error fetching data:\", err); // Log the error\n//             setError(\"An error occurred while fetching the data\");\n//         } finally {\n//             setLoading(false);\n//             setInput(\"\");\n//         }\n//     };\n//     const contextValue = {\n//         prevPrompt,\n//         setPrevPrompt,\n//         onSent,\n//         recentPrompt,\n//         setRecentPrompt,\n//         showResult,\n//         loading,\n//         resultData,\n//         error,\n//         input,\n//         setInput,\n//     };\n//     return (\n//         <Context.Provider value={contextValue}>\n//             {props.children}\n//         </Context.Provider>\n//     );\n// };\n// export default ContextProvider;","map":{"version":3,"names":["React","createContext","useState","run","jsx","_jsx","Context","ContextProvider","props","input","setInput","recentPrompt","setRecentPrompt","prevPrompt","setPrevPrompt","showResult","setShowResult","loading","setLoading","resultData","setResultData","error","setError","onSent","prompt","response","undefined","prev","console","log","err","newchat","contextValue","Provider","value","children"],"sources":["C:/Users/Mohana/Desktop/geminiai/geminiai/src/Context/Context.jsx"],"sourcesContent":["// import run from '../Config/gemini.js'\r\n// const { createContext, useState } = require(\"react\");\r\n// // import runChat from \"../Config/gemini\"\r\n\r\n\r\n// export const Context = createContext();\r\n\r\n\r\n\r\n// const ContextProvider = (props) => {\r\n\r\n//     const [input, setinput] = useState(\"\");\r\n//     const [recentprompt, setrecentprompt] = useState(\"\");\r\n//     const [prevprompt, setprevprompt] = useState([]);\r\n//     const [ShowResult, setshowResult] = useState(false);\r\n//     const [loading, setloading] = useState(false);\r\n//     const [resultdata, Setresultdata] = useState(\"\");\r\n\r\n//     const onSent = async () => {\r\n\r\n\r\n//         Setresultdata(\"\")\r\n//         setloading(true);\r\n//         setshowResult(true)\r\n//         setrecentprompt(input)\r\n//         const response = await run(input)\r\n//         Setresultdata(response)\r\n//         setloading(false);\r\n//         setinput(\"\")\r\n//     }\r\n\r\n\r\n\r\n//     const Contextvalue = {\r\n\r\n//         prevprompt,\r\n//         setprevprompt,\r\n//         onSent,\r\n//         recentprompt,\r\n//         setrecentprompt,\r\n\r\n//         ShowResult,\r\n//         loading,\r\n//         resultdata,\r\n//         input,\r\n//         setinput\r\n\r\n//     }\r\n\r\n//     return (\r\n//         <Context.Provider value={Contextvalue}>\r\n//             {props.children}\r\n//         </Context.Provider>\r\n//     )\r\n// }\r\n\r\n// export default ContextProvider\r\n\r\nimport React, { createContext, useState } from 'react';\r\nimport run from '../Config/gemini.js';\r\n\r\nexport const Context = createContext();\r\n\r\nconst ContextProvider = (props) => {\r\n    const [input, setInput] = useState(\"\");\r\n    const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n    const [prevPrompt, setPrevPrompt] = useState([]);\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultData, setResultData] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    // const delaypara = (index, nextword) => {\r\n\r\n    // }\r\n\r\n\r\n    const onSent = async (prompt) => {\r\n        setResultData(\"\");\r\n        setError(\"\");\r\n        setLoading(true);\r\n        setShowResult(true);\r\n\r\n        setRecentPrompt(input);\r\n        // setPrevPrompt(prev => [...prev, input])\r\n        let response;\r\n        if (prompt !== undefined) {\r\n            response = await run(prompt);\r\n            setRecentPrompt(prompt)\r\n        }\r\n        else {\r\n            setPrevPrompt(prev => [...prev, input])\r\n            setRecentPrompt(input)\r\n\r\n            response = await run(input)\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        try {\r\n            console.log(\"Sending prompt to API:\", input); // Log the input prompt\r\n            const response = await run(input);\r\n\r\n            console.log(\"Received response from API:\", response); // Log the response\r\n            setResultData(response);\r\n\r\n\r\n\r\n        } catch (err) {\r\n            console.error(\"Error fetching data:\", err); // Log the error\r\n            setError(\"An error occurred while fetching the data\");\r\n        } finally {\r\n            setLoading(false);\r\n            setInput(\"\");\r\n        }\r\n    };\r\n\r\n    const newchat = () => {\r\n        setLoading(false)\r\n        setShowResult(false)\r\n    }\r\n\r\n\r\n\r\n    const contextValue = {\r\n        prevPrompt,\r\n        setPrevPrompt,\r\n        onSent,\r\n        recentPrompt,\r\n        setRecentPrompt,\r\n        showResult,\r\n        loading,\r\n        resultData,\r\n        error,\r\n        input,\r\n        setInput,\r\n        newchat\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={contextValue}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nexport default ContextProvider;\r\n\r\n// import React, { createContext, useState } from 'react';\r\n// import run from '../Config/gemini.js';\r\n\r\n// export const Context = createContext();\r\n\r\n// const ContextProvider = (props) => {\r\n//     const [input, setInput] = useState(\"\");\r\n//     const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n//     const [prevPrompt, setPrevPrompt] = useState([]);\r\n//     const [showResult, setShowResult] = useState(false);\r\n//     const [loading, setLoading] = useState(false);\r\n//     const [resultData, setResultData] = useState(\"\");\r\n//     const [error, setError] = useState(\"\");\r\n\r\n//     const onSent = async () => {\r\n//         setResultData(\"\");\r\n//         setError(\"\");\r\n//         setLoading(true);\r\n//         setShowResult(true);\r\n//         setRecentPrompt(input);\r\n\r\n//         try {\r\n//             console.log(\"Sending prompt to API:\", input); // Log the input prompt\r\n//             const response = await run(input);\r\n//             console.log(\"Received response from API:\", response); // Log the response\r\n\r\n//             // Process response with custom formatting\r\n//             let responseArray = response.split(\"**\");\r\n//             let newarray = \"\";\r\n\r\n//             for (let i = 0; i < responseArray.length; i++) {\r\n//                 if (i === 0 || i % 2 !== 1) {\r\n//                     newarray += responseArray[i];\r\n//                 } else {\r\n//                     newarray += \"<br />\" + responseArray[i] + \"<br />\";\r\n//                 }\r\n//             }\r\n\r\n//             setResultData(newarray);\r\n\r\n//         } catch (err) {\r\n//             console.error(\"Error fetching data:\", err); // Log the error\r\n//             setError(\"An error occurred while fetching the data\");\r\n//         } finally {\r\n//             setLoading(false);\r\n//             setInput(\"\");\r\n//         }\r\n//     };\r\n\r\n//     const contextValue = {\r\n//         prevPrompt,\r\n//         setPrevPrompt,\r\n//         onSent,\r\n//         recentPrompt,\r\n//         setRecentPrompt,\r\n//         showResult,\r\n//         loading,\r\n//         resultData,\r\n//         error,\r\n//         input,\r\n//         setInput,\r\n//     };\r\n\r\n//     return (\r\n//         <Context.Provider value={contextValue}>\r\n//             {props.children}\r\n//         </Context.Provider>\r\n//     );\r\n// };\r\n\r\n// export default ContextProvider;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}